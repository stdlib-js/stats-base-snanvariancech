{
  "version": 3,
  "sources": ["../lib/snanvariancech.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859\u201366. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242\u201347. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snanvariancech( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction snanvariancech( N, correction, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ 0 ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Find an estimate for the mean...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tmu = v;\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += stride;\n\ti += 1;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = float64ToFloat32( v - mu );\n\t\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( d*d ) );\n\t\t\tM = float64ToFloat32( M + d );\n\t\t\tn += 1;\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(M2/nc) - float64ToFloat32(float64ToFloat32(M/n)*float64ToFloat32(M/nc)) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanvariancech;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859\u201366. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242\u201347. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snanvariancech( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction snanvariancech( N, correction, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ offset ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offset;\n\n\t// Find an estimate for the mean...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tmu = v;\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += stride;\n\ti += 1;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = float64ToFloat32( v - mu );\n\t\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( d*d ) );\n\t\t\tM = float64ToFloat32( M + d );\n\t\t\tn += 1;\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(M2/nc) - float64ToFloat32(float64ToFloat32(M/n)*float64ToFloat32(M/nc)) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanvariancech;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar snanvariancech = require( './snanvariancech.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snanvariancech, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snanvariancech;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a single-precision floating-point strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* @module @stdlib/stats-base-snanvariancech\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var snanvariancech = require( '@stdlib/stats-base-snanvariancech' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snanvariancech( x.length, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var snanvariancech = require( '@stdlib/stats-base-snanvariancech' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snanvariancech.ndarray( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar snanvariancech;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsnanvariancech = main;\n} else {\n\tsnanvariancech = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanvariancech;\n\n// exports: { \"ndarray\": \"snanvariancech.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_snanvariancech", "__commonJSMin", "exports", "module", "float64ToFloat32", "snanvariancech", "N", "correction", "x", "stride", "mu", "ix", "M2", "nc", "M", "d", "v", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "float64ToFloat32", "snanvariancech", "N", "correction", "x", "stride", "offset", "mu", "ix", "M2", "nc", "M", "d", "v", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "snanvariancech", "ndarray", "join", "tryRequire", "isError", "main", "snanvariancech", "tmp"]
}
